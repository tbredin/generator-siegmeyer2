// =====================================================
// ---------------- Siegmeyer II Mixins ----------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Siegmeyer II: https://github.com/tbredin/Siegmeyer2
// =====================================================


// Breakpoints. Either set one to one of the breakpoint variables, or use a custom value for minor breakpoints.
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin breakpoint($break: 0, $max: 0) {
    // Type of break variable
    $value: type-of($break);
    $unit: "";

    @if $value != string {
        $unit: unit($break);
    }

    // If it is a string (i.e. a breakpoint variable).
    @if $value == string {
        // If using 'break-1', 'break-2' etc output the correct breakpoints from map.
        @if map-has-key($breakpoint-map, $break) {
            @media screen and (min-width: #{break-get($break, start) / 16px * 1em} ) { @content; }
        } @else {
            @warn "#{$break} is not a set breakpoint variable";
        }
    } @else if  $value == number {
        @if $unit == "px" or $unit == "" {
            $break-get: no-unit($break);
            $max-val: no-unit($max);

            // If using other numbers output value in ems either for min, min & max or max width breakpoints.
            $query: "all" !default;
            @if $break-get != 0 and $max-val != 0 {
                $query: "(min-width: #{$break-get / 16 * 1em}) and (max-width: #{$max-val / 16 * 1em})";
            } @else if $break-get != 0 and $max-val == 0 {
                $query: "(min-width: #{$break-get / 16 * 1em})";
            } @else if $break-get == 0 and $max-val != 0 {
                $query: "(max-width: #{$max-val / 16 * 1em})";
            }
            @media #{$query} { @content; }
        } @else {
            @warn "#{$break} is not valid for use in breakpoint - use a unitless number, pixels, or a breakpoint key";
        }
    }
}


// wrapper for combining breakpoint mixin and susy 'with layout' mixin. Also gives breakpoint info to
@mixin breakpoint-layout($match-breakpoint) {
    // make current breakpoint context available in global scope
    $current-breakpoint: $match-breakpoint !global;
    $current-root: break-get($match-breakpoint, size) !global;

    @include breakpoint($match-breakpoint) {
        @include with-layout(break-get($match-breakpoint, layout)) {
            @content;
        }
    }

    // reset current breakpoint context
    $current-breakpoint: break-0 !global;
    $current-root: break-get(break-0, size) !global;
}


// shorthand function to retreive breakpoint values
@function break-get($break, $val) {
    @return map-get(map-get($breakpoint-map, $break), $val);
}


// sets containers for all breakpoints. It is important to use this to avoid incorrect breakpoint values due to type scaling
@mixin set-container {
    @extend %container;
}

%container {
    @include layout(break-get(break-0, layout));

    @if break-get(break-0, max) != none {
        $break-adjusted: px-to-ems(break-get(break-0, max), 1px * nth($sizes, 1));
        @if $debug-grid == true and $debug-allow == true {
            @include container($break-adjusted show-columns);
        } @else {
            @include container($break-adjusted hide);
        }
    }

    $i: 1;
    @each $break in $breaks {
         @if ($break != break-0) and break-get($break, max) != none {
            @include breakpoint-layout($break) {
                $break-adjusted: px-to-ems(break-get($break, max), 1px * nth($sizes, $i));

                @if $debug-grid == true and $debug-allow == true {
                    @include container($break-adjusted show-columns);
                } @else {
                    @include container($break-adjusted hide);
                }
            }
        }
        $i: $i + 1;
    }
}

// debug breakpoints
@mixin debug-breakpoints{
    body {
        // margin-bottom: 2rem;

        &:before, &:after {
            display: block;
            position: fixed;
            box-sizing: border-box;
            bottom: 0;
            animation-fill-mode: both;
            height: 2rem;
            line-height: 2rem;
        }

        &:before {
            text-align: center;
            background-color: $debug-color;
            background-color: transparentize($debug-color, 0.15);
            color: #fff;
            font-size: 0.875rem;
            z-index: 10000;
            // @include fontsize(iota, all);
            padding: 0 2rem;
            border: 1px solid lighten($debug-color, 10%);
            text-shadow: 0 -1px 0 darken($debug-color, 25%);
            width: 100%;
            animation: breakpoint-info-in 1s ease-out;

            @each $break in $breaks {
                @include breakpoint-layout($break) {
                    content: "#{$break} ---- cols: #{break-get($break, cols)} ---- start: #{break-get($break, start)} ---- max-width: #{break-get($break, max)}"
                }
            }
        }

        &:after {
            content: ".";
            color: transparent;
            z-index: 10001;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.25rem 0 0;
            animation: breakpoint-marker-in 1s ease-out;

            @include breakpoint(break-1) {
                border-left: 1px dotted lighten($debug-color, 15%);
                border-right: 1px dotted lighten($debug-color, 15%);
            }

            @each $break in $breaks {
                @include breakpoint-layout($break) {
                    width: break-get($break, start);
                }
            }
        }
    }

    @keyframes breakpoint-info-in {
        0% {
            transform: translateY(100%) translateZ(0);
        }
        100% {
            transform: translateZ(0);
        }
    }

    @keyframes breakpoint-marker-in {
        0% {
            transform: translateY(100%) translateX(-50%) translateZ(0);
        }
        100% {
            transform: translateX(-50%) translateZ(0);
        }
    }
}


// type shorthand helpers
// get font family
@function font-family-of($type) {
    @return unquote(map-get($type, font-family));
}

// get bold weight
@function bold-of($type) {
    @return unquote(map-get($type, bold));
}

// get regular weight
@function regular-of($type) {
    @return unquote(map-get($type, regular));
}

// get cap-height
@function cap-height-of($type) {
    @return unquote(map-get($type, cap-height));
}

// get cap-height weight
@function italic-of($type) {
    @return unquote(map-get($type, italic));
}

// recommended technique for svg img inclusion - use a wrapper that will maintain aspect ratio
@mixin svg-frame($w: 1, $h: 1) {
    @include scut-ratio-box($w / $h);
    display: block;
    transform: translateZ(0);

    img {
        opacity: 0;

        &[src$=".png"] {
            opacity: 1;
        }
    }

    > svg {
        @extend %svg-fill;
    }
}

%svg-fill {
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
}


// svg background image with png fallbacks
@mixin svg-bg($name, $size: false, $hires: false){
    background-image: url(#{$image-path}/#{$name}.svg);

    @if ($size) {
        background-size: $size;
    }

    @at-root .no-svg & {
        background-image: url(#{$image-path}/#{$name}.png);

        @if ($hires) {
            @media only screen and (min-device-pixel-ratio: 1.5) {
                background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.png);
            }
        }
    }
}


// Clearfix.
@mixin clearfix {
    &:before, &:after{
        display: table;
        content: "";
    }
    &:after{
        clear: both;
    }
}


// set on typeset items to extend typography found in typography.scss
@mixin typeset {
    @extend %typeset;

    position: relative;
}


// Root font-size in %, outputted in correct breakpoints.
@mixin rootsize {
    font-size: nth($sizes, 1) / 16 * 100%;

    // Loop through breakpoints.
    @for $i from 2 through $breakpoint-count {
        @media screen and (min-width: break-get(nth($breaks, $i), start) / 16px * 1em ) {
            font-size: nth($sizes, $i) / 16 * 100%;
        }
    }
}



// Set fontsize and baseline at once
@mixin type($font, $fontsize, $lineheight: 2, $leader: 0, $trailer: 0, $scale-ratio: 1) {
    $font-value: type-of($fontsize);
    $cap-height: map-get($font, cap-height);
    $context: index($breaks, $current-breakpoint) + 1;
    $font-calc: $fontsize * nth($sizes, $context);
    $font-unit: unit($fontsize);

    //set line height if different to default
    @if $lineheight != 2 {
        line-height: round($lineheight) * 1rem;
    }

    @if $font-value == number or $font-unit != rem {
        font-size: $fontsize;

        $baseline-shift: ($font-calc / 2 * (($lineheight * $current-root / $font-calc) - $cap-height)) / $current-root + $leader + 0.00001;
        $baseline-push: $trailer - (($font-calc / 2 * (($lineheight * $current-root / $font-calc) - $cap-height)) / $current-root + 0.00001);
        padding-top: $baseline-shift * 1rem;
        padding-bottom: $baseline-push * 1rem;

        @if $scale-ratio != 1 and $scale-ratio > 1 {
            $multiplier: 1;
            @if $current-breakpoint == break-0 {
                @each $breakpoint in $breaks {
                    @if $breakpoint != break-0 {

                        @include breakpoint-layout($breakpoint) {
                            $increment: ($scale-ratio - 1) / ($breakpoint-count - 1);
                            $multiplier: $multiplier + $increment;

                            $line-height-calc: round($lineheight * $multiplier);
                            $context: index($breaks, $current-breakpoint);
                            $font-calc: $fontsize * nth($sizes, $context) * $multiplier;

                            line-height: $line-height-calc * 1rem;
                            font-size: $fontsize * $multiplier;
                            $baseline-shift: ($font-calc / 2 * (($line-height-calc * $current-root / $font-calc) - $cap-height)) / $current-root + $leader + 0.00001;
                            $baseline-push: $trailer - (($font-calc / 2 * (($line-height-calc * $current-root / $font-calc) - $cap-height)) / $current-root + 0.00001);
                            padding-top: $baseline-shift * 1rem;
                            padding-bottom: $baseline-push * 1rem;
                        }
                    }
                }
            } @else {
                @warn "ERROR: scale-ratio must be used from root context, not within media queries";
            }
        }
    } @else {
        @warn "#{$fontsize} is not a valid font size. Please use rems";
    }

}

@mixin type-match {
    line-height: 0;
}

// Thick Content Mixins
@mixin button($colour: #fff, $hover: site-color(steel), $height: 3) {
    border-width: 1px;
    border-style: solid;
    padding: 0 1.5em;
    height: $height * 1rem;
    line-height: $height * 1rem * 0.9;
    @include type-size(18rem / 16);
    font-family: font-family-of($display-type);
    display: inline-block;
    background-color: transparent;
    background-image: none;
    box-sizing: border-box;
    margin: $height * 1rem / 6 1rem $height * 1rem / 6 0;
    @include button-paint($colour, $hover);

    &:hover {
        background-image: none;
    }
}

@mixin button-paint($colour, $hover: $colour) {
    color: $colour;
    border-color: $colour;

    &:hover {
        background-color: $colour;
        color: $hover;
    }
}

@mixin text-link($colour: #fff, $hover: $colour) {
    font-family: font-family-of($display-type);
    -webkit-font-smoothing: antialiased;
    color: $colour;
    background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,transparentize($colour, 0.65) 50%);
    background-repeat: repeat-x;
    background-size: 2px 0.06em;
    background-position: 0 91%;
    transition: color .1s ease, background-image .1s ease;

    &:hover {
        color: $hover;
        background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,transparentize($hover, 0.3) 50%);
    }
}

@mixin draw-arrow($color: #fff, $dir: bottom, $length: 5rem, $stem-width: 22%, $arrow-size: 1em) {
    $stem-start: 50% - $stem-width / 2;
    $stem-end: 50% + $stem-width / 2;

    display: block;
    text-indent: -999em;
    margin: 0 auto;
    position: relative;
    transform: translateZ(0);

    @if $dir == top or $dir == bottom {
        height: $length;
        transition: height 0.4s ease !important;
        width: $arrow-size;
        background: linear-gradient(to left, transparent 0%, transparent $stem-start, $color $stem-start, $color $stem-end, transparent $stem-end, transparent 100%)!important;
        background-size: 100% 2px!important;
        background-repeat: repeat-y!important;
    } @else {
        width: $length;
        transition: width 0.4s ease !important;
        height: $arrow-size;
        background: linear-gradient(to bottom, transparent 0%, transparent $stem-start, $color $stem-start, $color $stem-end, transparent $stem-end, transparent 100%)!important;
        background-size: 2px 100%!important;
        background-repeat: repeat-x!important;
    }

    &:before {
        content: "";
        position: absolute;

        // construct triangle
        // setup
        border-width: $arrow-size / 2;
        border-style: solid;
        border-color: transparent;

        @if $dir == top or $dir == bottom {
            left: 50%;
            transform: translateX(-50%);
        } @else {
            top: 0;
            transform: translateY(-50%);
        }

        // set triangle direction
        @if $dir == bottom {
            top: 100%;
            border-top-color: $color;
            border-bottom-width: 0;
        } @else if $dir == top {
            bottom: 100%;
            border-top-color: $color;
            border-bottom-width: 0;
        } @else if $dir == right {
            right: 100%;
            border-right-color: $color;
            border-left-width: 0;
        } @else if $dir == left {
            left: 100%;
            border-left-color: $color;
            border-right-width: 0;
        }
    }

    &:hover {
        @if $dir == top or $dir == bottom {
            height: $length * 1.2;
        } @else {
            width: $length * 1.2;
        }
    }
}
